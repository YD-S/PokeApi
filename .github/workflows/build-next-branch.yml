name: Handle PRs merged into master

on:
  pull_request:
    branches: [main, master]
    types:
      - closed

  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  handle-merge:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract source and base branches
        id: branchinfo
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual run detected"
            SOURCE_BRANCH="manual-init"
            BASE_BRANCH="main"
          else
            SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          fi

          echo "SOURCE_BRANCH=$SOURCE_BRANCH" >> $GITHUB_ENV
          echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV
          echo "Processing merged PR from $SOURCE_BRANCH to $BASE_BRANCH"

      # Frontend version bump
      - name: Handle frontend next branch
        if: startsWith(env.SOURCE_BRANCH, 'next-frontend') || env.SOURCE_BRANCH == 'manual-init'
        id: frontend_version_bump
        run: |
          echo "Processing frontend"
          
          if [ ! -f "frontend/package.json" ]; then
            echo "Error: frontend/package.json not found"
            exit 1
          fi
          
          CURRENT_VERSION=$(jq -r '.version' frontend/package.json)
          echo "Current frontend version: $CURRENT_VERSION"
          
          VERSION_CLEAN=${CURRENT_VERSION/-SNAPSHOT/}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_CLEAN"
          MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.0"
          NEXT_BRANCH="next-frontend-v${NEW_VERSION}"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEXT_BRANCH=$NEXT_BRANCH" >> $GITHUB_ENV
          echo "COMPONENT=frontend" >> $GITHUB_ENV

          echo "Planned new version: $NEW_VERSION"
          echo "Planned new branch: $NEXT_BRANCH"

      # Backend version bump
      - name: Handle backend next branch
        if: startsWith(env.SOURCE_BRANCH, 'next-backend') || env.SOURCE_BRANCH == 'manual-init'
        id: backend_version_bump
        run: |
          echo "Processing backend"

          if [ ! -f "backend/package.json" ]; then
            echo "Error: backend/package.json not found"
            exit 1
          fi
          
          CURRENT_VERSION=$(jq -r '.version' backend/package.json)
          echo "Current backend version: $CURRENT_VERSION"
          
          VERSION_CLEAN=${CURRENT_VERSION/-SNAPSHOT/}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_CLEAN"
          MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.0"
          NEXT_BRANCH="next-backend-v${NEW_VERSION}"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEXT_BRANCH=$NEXT_BRANCH" >> $GITHUB_ENV
          echo "COMPONENT=backend" >> $GITHUB_ENV

          echo "Planned new version: $NEW_VERSION"
          echo "Planned new branch: $NEXT_BRANCH"

      # Update frontend version
      - name: Update frontend version
        if: env.COMPONENT == 'frontend'
        run: |
          echo "Updating frontend/package.json to version $NEW_VERSION"
          jq --arg v "$NEW_VERSION" '.version = $v' frontend/package.json > frontend/tmp.json
          mv frontend/tmp.json frontend/package.json
          UPDATED_VERSION=$(jq -r '.version' frontend/package.json)
          echo "Verified updated version: $UPDATED_VERSION"

      # Update backend version
      - name: Update backend version
        if: env.COMPONENT == 'backend'
        run: |
          echo "Updating backend/package.json to version $NEW_VERSION"
          jq --arg v "$NEW_VERSION" '.version = $v' backend/package.json > backend/tmp.json
          mv backend/tmp.json backend/package.json
          UPDATED_VERSION=$(jq -r '.version' backend/package.json)
          echo "Verified updated version: $UPDATED_VERSION"

      # Create draft PR from new next branch
      - name: Create draft PR from new next branch to main
        if: env.COMPONENT == 'frontend' || env.COMPONENT == 'backend'
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "chore: bump ${{ env.COMPONENT }} version to ${{ env.NEW_VERSION }}"
          title: "Prepare ${{ env.COMPONENT }} release ${{ env.NEW_VERSION }}"
          body: |
            This PR tracks the upcoming ${{ env.COMPONENT }} release version **${{ env.NEW_VERSION }}**.
            **Changes:**
            - Bumped ${{ env.COMPONENT }} version to ${{ env.NEW_VERSION }}
            - Ready for development of next release
            All development should target this branch until release.
          branch: ${{ env.NEXT_BRANCH }}
          draft: true
          base: main

      # Delete old next branch
      - name: Delete old next branch
        if: startsWith(env.SOURCE_BRANCH, 'next-frontend') || startsWith(env.SOURCE_BRANCH, 'next-backend')
        run: |
          echo "Deleting old next branch: $SOURCE_BRANCH"
          git push origin --delete "$SOURCE_BRANCH" || echo "Branch $SOURCE_BRANCH does not exist or could not be deleted (this is normal)."

      # Summary
      - name: Summary
        if: env.COMPONENT == 'frontend' || env.COMPONENT == 'backend'
        run: |
          echo "âœ… Successfully processed $COMPONENT release workflow"
          echo "ðŸ”„ Merged branch: $SOURCE_BRANCH"
          echo "ðŸ†• Created branch: $NEXT_BRANCH"
          echo "ðŸ“¦ New version: $NEW_VERSION"
          echo "ðŸ“‹ Created draft PR for next release"
